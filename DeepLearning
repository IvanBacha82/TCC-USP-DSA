import numpy as np
import random
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from tensorflow.keras.regularizers import l2
import matplotlib.pyplot as plt

# Definir a semente para reprodutibilidade
seed_value = 1
np.random.seed(seed_value)
tf.random.set_seed(seed_value)
random.seed(seed_value)

# Definir X (variáveis independentes) e y (variável dependente)
X = df_final[['Temperatura', 'Pressao', 'Corrente', 'Vazao']]

# Definir a variável dependente
y = df_final['Viscosidade']

# Dividir os dados em treino e teste (80% treino, 20% teste)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Criar o modelo de deep learning
model_dl = Sequential()

# Camada 1: 64 neurônios com ReLU e regularização L2
model_dl.add(Dense(64, input_dim=X_train.shape[1], activation='relu', kernel_regularizer=l2(0.001)))

# Camada 2: 32 neurônios com ReLU
model_dl.add(Dense(32, activation='relu'))

# Camada de saída
model_dl.add(Dense(1))

# Compilar o modelo
from tensorflow.keras.optimizers import Adam
optimizer = Adam(learning_rate=0.0005)
model_dl.compile(optimizer=optimizer, loss='mean_squared_error')

model_dl.compile(optimizer='adam', loss='mean_squared_error')

# Treinar o modelo
history = model_dl.fit(X_train, y_train, epochs=200, batch_size=64, validation_split=0.2, verbose=1)

# Fazer previsões
y_pred_dl = model_dl.predict(X_test)

# Plotar o gráfico comparando y_test com y_pred_dl
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred_dl, alpha=0.5, label="Previsões")
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', label="Valores Reais")
plt.xlabel('Valores Reais (y_test)')
plt.ylabel('Previsões (y_pred_dl)')
plt.title('Comparação entre Valores Reais e Previsões - Deep Learning - Produto 17')
plt.legend()
plt.show()

# Plotar a perda (loss) ao longo das épocas
plt.figure(figsize=(10, 6))
plt.plot(history.history['loss'], label='Treino')
plt.plot(history.history['val_loss'], label='Validação')
plt.title('Perda (Loss) ao longo das épocas')
plt.ylabel('Perda')
plt.xlabel('Épocas')
plt.legend(loc='upper right')
plt.show()

# Calcular o RMSE
rmse = mean_squared_error(y_test, y_pred_dl, squared=False)

# Calcular o R²
r2 = r2_score(y_test, y_pred_dl)

# Exibir os resultados
print("Deep Learning:")
print("RMSE:", rmse)
print("R²:", r2)
