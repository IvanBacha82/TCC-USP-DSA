# Importar as bibliotecas necessárias
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Definir X (variáveis independentes) e y (variável dependente)
X = df_final[['Temperatura', 'Pressao', 'Corrente', 'Vazao']]
y = df_final['Viscosidade']

# Dividir os dados em treino e teste (80% treino, 20% teste)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Ajustar a profundidade máxima da árvore e o número mínimo de amostras por folha
model_tree = DecisionTreeRegressor(random_state=42, 
                                   max_depth=5,                # Limitar a profundidade
                                   min_samples_split=10,       # Ajustar min_samples_split             
                                   min_samples_leaf=5)         # Ajustar min_samples_leaf

# Treinar o modelo com os dados de treino
model_tree.fit(X_train, y_train)

# Fazer previsões com os dados de teste
y_pred_tree = model_tree.predict(X_test)

# Plotar o gráfico comparando y_test com y_pred_tree
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred_tree, alpha=0.5, label="Previsões")
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', label="Valores Reais")
plt.xlabel('Valores Reais (y_test)')
plt.ylabel('Previsões (y_pred_tree)')
plt.title('Comparação entre Valores Reais e Previsões - Árvore de Decisão')
plt.legend()
plt.show()

# Calcular o RMSE (Root Mean Squared Error)
rmse = mean_squared_error(y_test, y_pred_tree, squared=False)

# Calcular o R²
r2 = r2_score(y_test, y_pred_tree)

# Exibir os resultados
print("RMSE:", rmse)
print("R²:", r2)
