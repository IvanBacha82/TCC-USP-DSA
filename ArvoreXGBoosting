import xgboost as xgb
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Definir X (variáveis independentes) e y (variável dependente)
X = df_final[['Temperatura', 'Pressao', 'Corrente', 'Vazao']]
y = df_final['Viscosidade']

# Dividir os dados em treino e teste (80% treino, 20% teste)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Criar o modelo XGBoost com os hiperparâmetros fornecidos
xgb_model = xgb.XGBRegressor(
    max_depth=6,
    n_estimators=600,
    learning_rate=0.05,
    subsample=0.8,
    colsample_bytree=0.5,
    gamma=0.1,
    reg_alpha=0.1,
    reg_lambda=0.1,
    min_child_weight=1,
    scale_pos_weight=1,
    random_state=42
)
# Treinar o modelo XGBoost com os dados de treino
xgb_model.fit(X_train, y_train)

# Fazer previsões no conjunto de teste
y_pred_xgb = xgb_model.predict(X_test)

# Plotar o gráfico comparando y_test com y_pred_xgb
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred_xgb, alpha=0.5, label="Previsões XGBoost")
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', label="Valores Reais")
plt.xlabel('Valores Reais (y_test)')
plt.ylabel('Previsões (y_pred_xgb)')
plt.title('Comparação entre Valores Reais e Previsões - XGBoost - Produto 23')
plt.legend()
plt.show()

# Calcular o RMSE (Root Mean Squared Error)
rmse_xgb = mean_squared_error(y_test, y_pred_xgb, squared=False)
r2_xgb = r2_score(y_test, y_pred_xgb)

# Exibir os resultados
print("RMSE:", rmse_xgb)
print("R²:", r2_xgb)
