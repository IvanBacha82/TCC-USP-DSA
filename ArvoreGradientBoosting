from sklearn.model_selection import train_test_split
from sklearn.ensemble import GradientBoostingRegressor
from sklearn.model_selection import GridSearchCV
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error, r2_score

# Definir X (variáveis independentes) e y (variável dependente)
X = df_final[['Temperatura', 'Pressao', 'Corrente', 'Vazao']]
y = df_final['Viscosidade']

# Dividir os dados em treino e teste (80% treino, 20% teste)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Definir os parâmetros a serem testados
param_grid_gb = {
    'n_estimators': [100, 200, 300],
    'learning_rate': [0.01, 0.05, 0.1],
    'max_depth': [3, 5, 10],
    'min_samples_split': [2, 5, 10],
    'min_samples_leaf': [1, 2, 4]
}

# Criar o modelo de Gradient Boosting com verbose ativado
model_gb = GradientBoostingRegressor(random_state=42, verbose=1)

# Usar GridSearchCV para encontrar os melhores hiperparâmetros com verbose ativado
grid_search_gb = GridSearchCV(estimator=model_gb, param_grid=param_grid_gb, cv=5, scoring='neg_mean_squared_error', verbose=2)

# Iniciar o Grid Search
grid_search_gb.fit(X_train, y_train)

# Obter os melhores parâmetros
best_params_gb = grid_search_gb.best_params_
print(f"Melhores parâmetros para Gradient Boosting: {best_params_gb}")

# Fazer previsões com o modelo otimizado
best_model_gb = grid_search_gb.best_estimator_
y_pred_gb = best_model_gb.predict(X_test)

# Plotar o gráfico comparando y_test com y_pred_gb
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred_gb, alpha=0.5, label="Previsões")
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', label="Valores Reais")
plt.xlabel('Valores Reais (y_test)')
plt.ylabel('Previsões (y_pred_gb)')
plt.title('Comparação entre Valores Reais e Previsões - Gradient Boosting - Produto 23')
plt.legend()
plt.show()

# Calcular o RMSE (Root Mean Squared Error)
rmse = mean_squared_error(y_test, y_pred_gb, squared=False)

# Calcular o R²
r2 = r2_score(y_test, y_pred_gb)

# Exibir os resultados
print("RMSE:", rmse)
print("R²:", r2)
