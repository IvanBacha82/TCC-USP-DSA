from sklearn.neural_network import MLPRegressor
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt

# Definir X (variáveis independentes) e y (variável dependente)
X = df_final[['Temperatura', 'Pressao', 'Corrente', 'Vazao']]

# Definir a variável dependente
y = df_final['Viscosidade']

# Dividir os dados em treino e teste (80% treino, 20% teste)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Agora aplique o MLPRegressor com mais neurônios e mais iterações
model_mlp = MLPRegressor(hidden_layer_sizes=(100, 100, 100), max_iter=2000, random_state=42)

# Treinar o modelo com os dados escalados
model_mlp.fit(X_train, y_train)

# Fazer previsões com os dados de teste escalados
y_pred_mlp = model_mlp.predict(X_test)

# Plotar o gráfico comparando y_test com y_pred_mlp
plt.figure(figsize=(10, 6))
plt.scatter(y_test, y_pred_mlp, alpha=0.5, label="Previsões")
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', label="Valores Reais")
plt.xlabel('Valores Reais (y_test)')
plt.ylabel('Previsões (y_pred_mlp)')
plt.title('Comparação entre Valores Reais e Previsões - Redes Neurais (MLP)')
plt.legend()
plt.show()

# Calcular o RMSE (Root Mean Squared Error)
rmse = mean_squared_error(y_test, y_pred_mlp, squared=False)

# Calcular o R²
r2 = r2_score(y_test, y_pred_mlp)

# Exibir os resultados
print("RMSE:", rmse)
print("R²:", r2)
